from utils.logging_setup import setup_logging
setup_logging()
import asyncio
import datetime
from aiogram import Bot, Dispatcher
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from utils.trade_tracker import add_open_trade, check_open_trades
import pytz
from db.database import init_db



from config import (
    BOT_TOKEN,
    ADMIN_CHAT_ID,
    CHANNEL_ID,
    MAX_SIGNALS_PER_RUN,
    SIGNAL_INTERVAL_MINUTES
)

from core.bybit_api import BybitAPI
from core.filters import filter_by_volume, apply_all_filters
from core.signal_generator import generate_signal
from core.risk_manager import evaluate_risk
from utils.format_text import format_signal_text
from utils.used_tracker import load_used_today, save_used_today, clear_used_today
from handlers import setup_routers
from core.news import news_cache
from apscheduler.triggers.interval import IntervalTrigger
from utils.dataset_logger import log_signal_row, make_signal_id
import logging

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

async def auto_signal_job(bot: Bot):
    print(f"\nüîÑ [{datetime.datetime.now().strftime('%H:%M:%S')}] –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞...")

    api = BybitAPI()
    used_symbols = load_used_today()

    try:
        all_pairs = api.get_usdt_pairs()
        print(f"üìä –í—Å–µ–≥–æ –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä: {len(all_pairs)}")

        filtered = filter_by_volume(all_pairs)
        print(f"‚úÖ –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞ –æ–±—ä—ë–º–∞: {len(filtered)}")

        valid = apply_all_filters(filtered, api.get_ohlcv)
        print(f"üîç –ü—Ä–æ—à–ª–∏ –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã: {len(valid)}\n")

        sent = 0
        for pair in valid:
            try:
                symbol = pair["symbol"]

                if symbol in used_symbols:
                    print(f"‚Üí {symbol} ‚Äî ‚è© –£–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª—Å—è —Å–µ–≥–æ–¥–Ω—è ‚Äî –ø—Ä–æ–ø—É—Å–∫")
                    continue

                print(f"‚Üí –ê–Ω–∞–ª–∏–∑ –ø–∞—Ä—ã: {symbol}")
                ohlcv = api.get_ohlcv(symbol, interval="60", limit=300)
                if not ohlcv:
                    print("  ‚ö†Ô∏è –ù–µ—Ç —Å–≤–µ—á–µ–π ‚Äî –ø—Ä–æ–ø—É—Å–∫")
                    continue

                # –Ω–æ–≤–æ—Å—Ç–Ω–æ–π —Ñ–∞–∫—Ç–æ—Ä
                def news_provider(sym: str) -> float:
                    return news_cache.score(sym)

                signal = generate_signal(
                    symbol,
                    ohlcv,
                    fetcher=api.get_ohlcv,
                    news_score_provider=news_provider
                )

                if signal.get("position") == "NONE":
                    print(f"  ‚èπÔ∏è –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–∞ ‚Äî –ø—Ä–æ–ø—É—Å–∫ ({signal.get('reason','')})")
                    continue

                signal = evaluate_risk(signal)
                if "‚ùå" in signal.get("quality", ""):
                    print(f"  ‚ùå –ü–ª–æ—Ö–æ–π —Å–∏–≥–Ω–∞–ª (rr: {signal.get('rr_ratio')}) ‚Äî –ø—Ä–æ–ø—É—Å–∫")
                    continue

                # ID —Å–∏–≥–Ω–∞–ª–∞ –∏ –ª–æ–≥ –≤ –¥–∞—Ç–∞—Å–µ—Ç
                signal_id = make_signal_id(symbol)
                signal["signal_id"] = signal_id
                log_signal_row({
                    "signal_id": signal_id,
                    "ts": datetime.datetime.utcnow().isoformat(),
                    "symbol": symbol,
                    "position": signal["position"],
                    "entry": signal["entry"],
                    "sl": signal["sl"],
                    "tp": signal["tp"],
                    "score": signal.get("score"),
                    "confidence": signal.get("confidence"),
                    "rr_ratio": signal.get("rr_ratio"),
                    "timeframe": "15m",
                    "extras": signal.get("reasons", []),
                })

                # –ª–æ–≥ –≤ –Ω–∞—à —Ñ–∞–π–ª (–Ω–µ —Ä–æ–Ω—è–µ–º –ø—Ä–∏ –æ—à–∏–±–∫–µ)
                try:
                    from utils.logger import log_signal
                    log_signal(signal)
                except Exception as e:
                    print(f"‚ö†Ô∏è log_signal error: {e}")

                # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç (—Å —Ñ–æ–ª–ª–±–µ–∫–æ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—à–∏–±–∫–µ)
                try:
                    text = format_signal_text(signal)
                except Exception as e:
                    print(f"‚ö†Ô∏è format_signal_text error: {e}")
                    text = (
                        f"üìà {signal.get('symbol')} {signal.get('position')}\n"
                        f"entry: {signal.get('entry')}  tp: {signal.get('tp')}  sl: {signal.get('sl')}\n"
                        f"RR: {signal.get('rr_ratio')}  score: {signal.get('score')}"
                    )

                print(f"  ‚úÖ –°–∏–≥–Ω–∞–ª –Ω–∞–π–¥–µ–Ω (rr: {signal.get('rr_ratio')}) ‚Äî –æ—Ç–ø—Ä–∞–≤–∫–∞...")

                # –æ—Ç–ø—Ä–∞–≤–∫–∞
                await bot.send_message(chat_id=ADMIN_CHAT_ID, text=text, parse_mode="HTML")
                try:
                    await bot.send_message(chat_id=CHANNEL_ID, text=text, parse_mode="HTML")
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª: {e}")

                # —É—á—ë—Ç –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
                add_open_trade(signal)
                used_symbols.add(symbol)
                save_used_today(used_symbols)

                sent += 1
                if sent >= MAX_SIGNALS_PER_RUN:
                    break

            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {pair}: {e}")
                continue

        if sent == 0:
            print("üòï –ü–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–∞–Ω–∞–ª–∏–∑–∞: {e}")
        try:
            await bot.send_message(chat_id=ADMIN_CHAT_ID, text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–∞–Ω–∞–ª–∏–∑–∞:\n{e}")
        except Exception:
            pass

async def news_refresh_job():
    await news_cache.refresh()


def setup_scheduler(bot: Bot):
    # –æ–¥–∏–Ω –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫, —Å –¥–µ—Ñ–æ–ª—Ç–∞–º–∏ –∏ —Ç–∞–π–º–∑–æ–Ω–æ–π
    scheduler = AsyncIOScheduler(
        timezone=pytz.timezone('Europe/Moscow'),
        job_defaults={
            "coalesce": True,
            "max_instances": 1,
            "misfire_grace_time": 120
        }
    )

    # —Ñ–ª–∞–≥ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–∏
    state = {"running": False}

    # –æ–±—ë—Ä—Ç–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å async, —á—Ç–æ–±—ã –¥–æ–∂–¥–∞—Ç—å—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–Ω–∏–º–∞—Ç—å —Ñ–ª–∞–≥
    async def job_wrapper():
        if state["running"]:
            logging.warning("‚è≥ –ü—Ä–µ–¥—ã–¥—É—â–∏–π –∞–Ω–∞–ª–∏–∑ –µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω ‚Äî –ø—Ä–æ–ø—É—Å–∫.")
            return
        state["running"] = True
        logging.info("üîÑ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–∞–Ω–∞–ª–∏–∑–∞...")
        try:
            await auto_signal_job(bot)
        finally:
            state["running"] = False

    # –∞–≤—Ç–æ–∞–Ω–∞–ª–∏–∑ –ø–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª—É
    scheduler.add_job(
        job_wrapper,
        trigger=IntervalTrigger(minutes=SIGNAL_INTERVAL_MINUTES),
        id="auto_signal_job",
        replace_existing=True
    )

    # –æ—á–∏—Å—Ç–∫–∞ used_today –≤ 00:00 –ú–°–ö
    scheduler.add_job(
        clear_used_today,
        trigger=CronTrigger(hour=0, minute=0, timezone=pytz.timezone('Europe/Moscow')),
        id="clear_used_daily",
        replace_existing=True
    )

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫ –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω
    scheduler.add_job(
        lambda: check_open_trades(get_price),
        trigger=IntervalTrigger(minutes=2),
        id="check_open_trades",
        replace_existing=True
    )

    # –Ω–æ–≤–æ—Å—Ç–∏ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω
    scheduler.add_job(
    news_refresh_job,
    trigger=IntervalTrigger(minutes=5),
    id="news_refresh",
    replace_existing=True
    )

    # –∞–≤—Ç–æ–ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –≤ 01:00 –ú–°–ö
    from train.auto_retrain import auto_retrain
    scheduler.add_job(
        lambda: asyncio.create_task(auto_retrain(bot)),
        trigger=CronTrigger(hour=1, minute=0, timezone=pytz.timezone('Europe/Moscow')),
        id="auto_retrain",
        replace_existing=True
    )

    scheduler.start()

    job = scheduler.get_job("auto_signal_job")
    logging.info(f"üïí auto_signal_job: interval={SIGNAL_INTERVAL_MINUTES}m, next_run={job.next_run_time}")

    return scheduler



async def main():
    setup_routers(dp)
    setup_scheduler(bot)
    # –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º –≤—Ä—É—á–Ω—É—é auto_signal_job ‚Äî –ø—É—Å—Ç—å –∏–¥—ë—Ç –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
    # await auto_signal_job(bot)
    await dp.start_polling(bot)


def get_price(symbol: str) -> float:
    api = BybitAPI()
    ticker = api.get_ohlcv(symbol, interval="1", limit=1)  # –±–µ—Ä—ë–º 1-–º–∏–Ω —Å–≤–µ—á—É
    if ticker:
        return float(ticker[-1][4])  # close
    return 0.0


if __name__ == "__main__":
    init_db()  # —Å–æ–∑–¥–∞—ë–º –ë–î –∏ —Ñ–∞–π–ª—ã, –µ—Å–ª–∏ –∏—Ö –µ—â—ë –Ω–µ—Ç
    asyncio.run(main())  # –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
