import asyncio
import datetime
from aiogram import Bot, Dispatcher
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.interval import IntervalTrigger
from apscheduler.triggers.cron import CronTrigger
from utils.trade_tracker import add_open_trade, check_open_trades
import pytz
from db.database import init_db


from config import (
    BOT_TOKEN,
    ADMIN_CHAT_ID,
    CHANNEL_ID,
    MAX_SIGNALS_PER_RUN,
    SIGNAL_INTERVAL_MINUTES
)

from core.bybit_api import BybitAPI
from core.filters import filter_by_volume, apply_all_filters
from core.signal_generator import generate_signal
from core.risk_manager import evaluate_risk
from utils.format_text import format_signal_text
from utils.used_tracker import load_used_today, save_used_today, clear_used_today
from handlers import setup_routers

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()


async def auto_signal_job(bot: Bot):
    print(f"\nüîÑ [{datetime.datetime.now().strftime('%H:%M:%S')}] –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞...")

    api = BybitAPI()
    used_symbols = load_used_today()

    try:
        all_pairs = api.get_usdt_pairs()
        print(f"üìä –í—Å–µ–≥–æ –ø–∞—Ä: {len(all_pairs)}")

        filtered = filter_by_volume(all_pairs)
        print(f"‚úÖ –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞ –æ–±—ä—ë–º–∞: {len(filtered)}")

        valid = apply_all_filters(filtered, api.get_ohlcv)
        print(f"üîç –ü—Ä–æ—à–ª–∏ –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã: {len(valid)}\n")

        sent = 0
        for pair in valid:
            symbol = pair["symbol"]

            if symbol in used_symbols:
                print(f"‚Üí {symbol} ‚Äî ‚è© –£–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª—Å—è —Å–µ–≥–æ–¥–Ω—è ‚Äî –ø—Ä–æ–ø—É—Å–∫")
                continue

            print(f"‚Üí –ê–Ω–∞–ª–∏–∑ –ø–∞—Ä—ã: {symbol}")
            ohlcv = api.get_ohlcv(symbol, interval="15", limit=200)
            if not ohlcv:
                print(f"  ‚ö†Ô∏è –ù–µ—Ç —Å–≤–µ—á–µ–π ‚Äî –ø—Ä–æ–ø—É—Å–∫")
                continue

            signal = generate_signal(symbol, ohlcv)

            if signal["position"] == "NONE":
                print(f"  ‚èπÔ∏è –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–∞ ‚Äî –ø—Ä–æ–ø—É—Å–∫")
                continue

            signal = evaluate_risk(signal)

            if "‚ùå" in signal["quality"]:
                print(f"  ‚ùå –ü–ª–æ—Ö–æ–π —Å–∏–≥–Ω–∞–ª (rr: {signal['rr_ratio']}) ‚Äî –ø—Ä–æ–ø—É—Å–∫")
                continue

            print(f"  ‚úÖ –°–∏–≥–Ω–∞–ª –Ω–∞–π–¥–µ–Ω (rr: {signal['rr_ratio']}) ‚Äî –æ—Ç–ø—Ä–∞–≤–∫–∞...")

            text = format_signal_text(signal)
            from utils.logger import log_signal
            log_signal(signal)


            # –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É
            await bot.send_message(chat_id=ADMIN_CHAT_ID, text=text, parse_mode="HTML")

            # –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∫–∞–Ω–∞–ª
            try:
                await bot.send_message(chat_id=CHANNEL_ID, text=text, parse_mode="HTML")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª: {e}")

            #–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
            add_open_trade(signal)

            used_symbols.add(symbol)
            save_used_today(used_symbols)

            sent += 1
            if sent >= MAX_SIGNALS_PER_RUN:
                break

        if sent == 0:
            print("üòï –ü–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–∞–Ω–∞–ª–∏–∑–∞: {e}")
        await bot.send_message(chat_id=ADMIN_CHAT_ID, text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–∞–Ω–∞–ª–∏–∑–∞:\n{e}")


def setup_scheduler(bot: Bot):
    scheduler = AsyncIOScheduler()

    # üìà –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫–∞–∂–¥—ã–µ N –º–∏–Ω—É—Ç
    scheduler.add_job(
        auto_signal_job,
        trigger=IntervalTrigger(minutes=SIGNAL_INTERVAL_MINUTES),
        args=[bot],
        id="auto_signal_job"
    )

    # üßπ –û—á–∏—Å—Ç–∫–∞ used_today.json –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:00 –ú–°–ö
    scheduler.add_job(
        clear_used_today,
        trigger=CronTrigger(hour=0, minute=0, timezone=pytz.timezone('Europe/Moscow')),
        id="clear_used_daily"
    )

        # üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫ –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã
    scheduler.add_job(
        lambda: check_open_trades(get_price),
        trigger=IntervalTrigger(minutes=2),
        id="check_open_trades"
    )
    from train.auto_retrain import auto_retrain

    # üß† –ê–≤—Ç–æ–ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 01:00 –ú–°–ö
    scheduler.add_job(
    lambda: asyncio.create_task(auto_retrain(bot)),
    trigger=CronTrigger(hour=1, minute=0, timezone=pytz.timezone('Europe/Moscow')),
    id="auto_retrain"
    )


    scheduler.start()


async def main():
    setup_routers(dp)
    setup_scheduler(bot)

    await auto_signal_job(bot)  # üî• –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ —Å—Ä–∞–∑—É
    await dp.start_polling(bot)

def get_price(symbol: str) -> float:
    api = BybitAPI()
    ticker = api.get_ohlcv(symbol, interval="1", limit=1)  # –±–µ—Ä—ë–º 1-–º–∏–Ω —Å–≤–µ—á—É
    if ticker:
        return float(ticker[-1][4])  # close
    return 0.0


if __name__ == "__main__":
    init_db()  # —Å–æ–∑–¥–∞—ë–º –ë–î –∏ —Ñ–∞–π–ª—ã, –µ—Å–ª–∏ –∏—Ö –µ—â—ë –Ω–µ—Ç
    asyncio.run(main())  # –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
