import csv
from datetime import datetime, timedelta
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

router = Router()

LOG_FILE = "signals_log.csv"

def load_signals(period_days: int):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π"""
    signals = []
    try:
        with open(LOG_FILE, newline="", encoding="utf-8") as file:
            reader = csv.DictReader(file)
            cutoff_date = datetime.now() - timedelta(days=period_days)
            for row in reader:
                dt = datetime.strptime(row["datetime"], "%Y-%m-%d %H:%M:%S")
                if dt >= cutoff_date:
                    signals.append(row)
    except FileNotFoundError:
        pass
    return signals

def calculate_stats(signals: list, days: int):
    """–í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–∏–≥–Ω–∞–ª–∞–º"""
    total = len(signals)
    if total == 0:
        return f"üìä –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω. —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ –±—ã–ª–æ."

    positive = sum(1 for s in signals if "‚úÖ" in s["quality"])
    negative = sum(1 for s in signals if "‚ùå" in s["quality"])
    avg_rr = sum(float(s["rr_ratio"] or 0) for s in signals) / total

    win_rate = (positive / total) * 100 if total else 0

    return (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {days} –¥–Ω.:\n\n"
        f"–í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {total}\n"
        f"‚úÖ –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö: {positive}\n"
        f"‚ùå –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö: {negative}\n"
        f"üìà WinRate: {win_rate:.2f}%\n"
        f"‚öñ –°—Ä–µ–¥–Ω–∏–π RR: {avg_rr:.2f}"
    )

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ ---
def get_period_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìÖ 1 –¥–µ–Ω—å", callback_data="stats_1"),
            InlineKeyboardButton(text="üìÖ 7 –¥–Ω–µ–π", callback_data="stats_7"),
            InlineKeyboardButton(text="üìÖ 30 –¥–Ω–µ–π", callback_data="stats_30"),
        ]
    ])

@router.message(Command("stats"))
async def cmd_stats(message: types.Message):
    """–í—ã–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞"""
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", reply_markup=get_period_keyboard())

@router.callback_query(F.data.startswith("stats_"))
async def callback_stats(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞"""
    days = int(callback.data.split("_")[1])
    signals = load_signals(days)
    stats_text = calculate_stats(signals, days)
    
    # –ú–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await callback.message.edit_text(stats_text, reply_markup=get_period_keyboard())
    await callback.answer()
