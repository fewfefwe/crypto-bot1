# handlers/signals.py  ‚Äî –≤–µ—Ä—Å–∏—è —Å edit_text, ¬´–ù–∞–∑–∞–¥¬ª –∏ ¬´–û–±–Ω–æ–≤–∏—Ç—å¬ª

import asyncio
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command

from core.bybit_api import BybitAPI
from core.filters import filter_by_volume, apply_all_filters
from core.signal_generator import generate_signal
from core.risk_manager import evaluate_risk
from utils.format_text import format_signal_text

router = Router()

# ---------- UI ----------
def back_menu_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="main_menu")]
    ])

def signals_menu_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÅ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="signals_rescan")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="main_menu")]
    ])

LOADING_TEXT = "‚è≥ –ü–æ–∏—Å–∫ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."

# ---------- –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ ----------
async def _scan_and_render(limit: int = 3) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞:
    - —Å–≤–æ–¥–∫–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–∞—Ä/—Ñ–∏–ª—å—Ç—Ä–∞–º
    - –¥–æ `limit` –ª—É—á—à–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ format_signal_text(...)
    """
    api = BybitAPI()

    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä—ã –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º
    all_pairs = api.get_usdt_pairs()
    volume_filtered = filter_by_volume(all_pairs)
    final_pairs = apply_all_filters(volume_filtered, api.get_ohlcv)

    header = (
        "üîÑ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞‚Ä¶\n"
        f"üìä –í—Å–µ–≥–æ –ø–∞—Ä: {len(all_pairs)}\n"
        f"‚úÖ –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞ –æ–±—ä—ë–º–∞: {len(volume_filtered)}\n"
        f"üßπ –ü–æ—Å–ª–µ –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤: {len(final_pairs)}\n"
    )

    sent = 0
    chunks: list[str] = []
    for pair in final_pairs:
        # 15m –∏–ª–∏ 60? ‚Äî –æ—Å—Ç–∞–≤–ª—è—é —Ç–≤–æ—ë 60 –∫–∞–∫ –±—ã–ª–æ
        ohlcv = api.get_ohlcv(pair["symbol"], interval="60", limit=220)  # 220, —á—Ç–æ–±—ã —Ö–≤–∞—Ç–∞–ª–æ –Ω–∞ EMA200
        if not ohlcv:
            continue

        signal = generate_signal(pair["symbol"], ohlcv)
        signal = evaluate_risk(signal)

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–ª–æ—Ö–∏–µ —Å–∏–≥–Ω–∞–ª—ã
        if isinstance(signal, dict) and signal.get("quality") and "‚ùå" in signal["quality"]:
            continue

        # –§–æ—Ä–º–∞—Ç
        try:
            text = format_signal_text(signal)
        except Exception:
            # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –≥–¥–µ-—Ç–æ –Ω–µ—Ç –æ–∂–∏–¥–∞–µ–º—ã—Ö –ø–æ–ª–µ–π
            text = f"‚Ä¢ {pair['symbol']}: {signal}"

        chunks.append(text)
        sent += 1
        if sent >= limit:
            break

    if sent == 0:
        return header + "\nüòï –ü–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
    else:
        return header + "\n".join(chunks)

# ---------- –•—ç–Ω–¥–ª–µ—Ä—ã: –∫–Ω–æ–ø–∫–∏ (edit_text) ----------
@router.callback_query(F.data == "signals")
async def show_signals(callback: CallbackQuery):
    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º ¬´–≥—Ä—É–∑–∏—Ç—Å—è¬ª, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–µ–ª —Ä–µ–∞–∫—Ü–∏—é
    await callback.message.edit_text(LOADING_TEXT, reply_markup=signals_menu_kb())
    await callback.answer()

    # –°–∫–∞–Ω–∏–º –∏ –∑–∞–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Ç–µ–º –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    text = await _scan_and_render(limit=3)
    await callback.message.edit_text(text, reply_markup=signals_menu_kb(), parse_mode="HTML")

@router.callback_query(F.data == "signals_rescan")
async def rescan_signals(callback: CallbackQuery):
    await callback.message.edit_text("üîÅ –û–±–Ω–æ–≤–ª—è—é‚Ä¶", reply_markup=signals_menu_kb())
    await callback.answer()
    text = await _scan_and_render(limit=3)
    await callback.message.edit_text(text, reply_markup=signals_menu_kb(), parse_mode="HTML")

# ---------- –•—ç–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /signal (–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞) ----------
@router.message(Command("signal"))
async def send_signals(message: Message):
    # –û—Ç–ø—Ä–∞–≤–∏–º –æ–¥–Ω–æ —Å–ª—É–∂–µ–±–Ω–æ–µ –∏ –±—É–¥–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ
    msg = await message.answer(LOADING_TEXT)

    try:
        text = await _scan_and_render(limit=3)
        await msg.edit_text(text, reply_markup=signals_menu_kb(), parse_mode="HTML")
    except Exception as e:
        await msg.edit_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–∏–≥–Ω–∞–ª–æ–≤:\n{e}", reply_markup=back_menu_kb())
