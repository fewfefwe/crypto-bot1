from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from handlers.stats import get_period_keyboard  # —Ç–≤–æ–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã–π —Ö–µ–ª–ø–µ—Ä
from db.database import (
    has_active_subscription, get_subscription_expiry,
    autotrade_paid, autotrade_enabled
)
from datetime import datetime

router = Router()

# ========= –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã =========
def get_main_menu() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üíπ –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª—ã", callback_data="signals")],
        [InlineKeyboardButton(text="ü§ñ –ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è", callback_data="trading_menu")],
        [InlineKeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats_menu")],
        [InlineKeyboardButton(text="üí≥ –¢–∞—Ä–∏—Ñ—ã", callback_data="tariffs")],
    ])

def back_button() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="main_menu")]
    ])

def signals_tariffs_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="1 –Ω–µ–¥–µ–ª—è",  callback_data="buy_signals_week"),
            InlineKeyboardButton(text="1 –º–µ—Å—è—Ü",   callback_data="buy_signals_month"),
            InlineKeyboardButton(text="3 –º–µ—Å—è—Ü–∞",  callback_data="buy_signals_quarter"),
        ],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="main_menu")]
    ])

def signals_subscribed_kb(user_id: int) -> InlineKeyboardMarkup:
    paid = autotrade_paid(user_id)
    kb = [
        [
            InlineKeyboardButton(
                text=("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª–∏" if paid else "ü§ñ –ü–æ–¥–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—é"),
                callback_data=("autotrade_settings" if paid else "autotrade_connect")
            )
        ],
        [InlineKeyboardButton(text="‚ûï –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="signals_extend")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=kb)

# ========= –£—Ç–∏–ª–∏—Ç—ã =========
def _format_expiry(dt: datetime | None) -> str:
    if not dt:
        return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    return dt.strftime("%d.%m.%Y %H:%M")

# ========= –•—ç–Ω–¥–ª–µ—Ä—ã =========
@router.message(F.text == "/start")
async def start_command(message: Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ç—Ä–µ–π–¥–∏–Ω–≥–∞.\n\n"
        "–Ø –º–æ–≥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã, –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å —Å–∞–º (–ø–æ –∂–µ–ª–∞–Ω–∏—é).\n\n"
        "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å:",
        reply_markup=get_main_menu()
    )

@router.callback_query(F.data == "main_menu")
async def go_main_menu(callback: CallbackQuery):
    await callback.message.edit_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ç—Ä–µ–π–¥–∏–Ω–≥–∞.\n\n"
        "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å:",
        reply_markup=get_main_menu()
    )
    await callback.answer()

# --- –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª—ã ---
@router.callback_query(F.data == "signals")
async def show_signals_entry(callback: CallbackQuery):
    user_id = callback.from_user.id

    if has_active_subscription(user_id):
        expiry = get_subscription_expiry(user_id)
        text = (
            "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–∏–≥–Ω–∞–ª—ã –∞–∫—Ç–∏–≤–Ω–∞.\n"
            f"‚è≥ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: <b>{_format_expiry(expiry)}</b>\n\n"
            "–ë–æ—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã –≤ —ç—Ç–æ—Ç —á–∞—Ç.\n"
            "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—é:"
        )
        # –ø–æ —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ù–û–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.answer(text, reply_markup=signals_subscribed_kb(user_id), parse_mode="HTML")
    else:
        text = (
            "üì° –ß—Ç–æ–±—ã –±–æ—Ç –ø—Ä–∏—Å—ã–ª–∞–ª –≤–∞–º —Å–∏–≥–Ω–∞–ª—ã, –Ω—É–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∂–µ.\n\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –±–æ—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã –≤ —ç—Ç–æ—Ç —á–∞—Ç.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:"
        )
        await callback.message.answer(text, reply_markup=signals_tariffs_kb())

    await callback.answer()

# --- –ó–∞–≥–ª—É—à–∫–∏ –ø–æ–∫—É–ø–∫–∏ —Ç–∞—Ä–∏—Ñ–æ–≤ (–ø–æ–¥–∫–ª—é—á–∏–º –æ–ø–ª–∞—Ç—É –ø–æ–∑–∂–µ) ---
@router.callback_query(F.data == "buy_signals_week")
async def buy_signals_week(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer("üßæ –¢–∞—Ä–∏—Ñ ¬´1 –Ω–µ–¥–µ–ª—è¬ª. –û–ø–ª–∞—Ç–∞ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –±–æ—Ç–µ.", reply_markup=back_button())

@router.callback_query(F.data == "buy_signals_month")
async def buy_signals_month(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer("üßæ –¢–∞—Ä–∏—Ñ ¬´1 –º–µ—Å—è—Ü¬ª. –û–ø–ª–∞—Ç–∞ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –±–æ—Ç–µ.", reply_markup=back_button())

@router.callback_query(F.data == "buy_signals_quarter")
async def buy_signals_quarter(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer("üßæ –¢–∞—Ä–∏—Ñ ¬´3 –º–µ—Å—è—Ü–∞¬ª. –û–ø–ª–∞—Ç–∞ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –±–æ—Ç–µ.", reply_markup=back_button())

# --- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ---
@router.callback_query(F.data == "stats_menu")
async def show_stats_menu(callback: CallbackQuery):
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
        reply_markup=get_period_keyboard()
    )
    await callback.answer()

# --- –û–±—â–∏–µ —Ç–∞—Ä–∏—Ñ—ã (–∏–Ω—Ñ–æ) ---
@router.callback_query(F.data == "tariffs")
async def show_tariffs(callback: CallbackQuery):
    await callback.message.edit_text(
        "üí≥ –û–±—â–∏–µ —Ç–∞—Ä–∏—Ñ—ã (–∏–Ω—Ñ–æ-—ç–∫—Ä–∞–Ω). –î–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ ¬´üíπ –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª—ã¬ª.",
        reply_markup=back_button()
    )
    await callback.answer()

# --- –ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è (–∑–∞–≥–ª—É—à–∫–∏: –¥–∞–ª—å—à–µ –¥–æ–±–∞–≤–∏–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –≤–≤–æ–¥ API) ---
@router.callback_query(F.data == "autotrade_connect")
async def autotrade_connect(callback: CallbackQuery):
    await callback.message.edit_text(
        "ü§ñ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª–∏.\n\n–°–∫–æ—Ä–æ —Ç—É—Ç –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø—Ä–∏–≤—è–∑–∞—Ç—å API –∏ –æ–ø–ª–∞—Ç–∏—Ç—å –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—é.",
        reply_markup=back_button()
    )
    await callback.answer()

@router.callback_query(F.data == "autotrade_settings")
async def autotrade_settings(callback: CallbackQuery):
    await callback.message.edit_text(
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª–∏.\n\n–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏: –í–∫–ª/–í—ã–∫–ª, —Ä–∏—Å–∫ %, –ø–ª–µ—á–æ, –º–∞—Ä–∂–∞, —Ä–µ–∂–∏–º –ø–æ–∑–∏—Ü–∏–∏.",
        reply_markup=back_button()
    )
    await callback.answer()

@router.callback_query(F.data == "trading_menu")
async def show_trading_menu(callback: CallbackQuery):
    await callback.message.edit_text(
        "ü§ñ –†–∞–∑–¥–µ–ª –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª–∏.\n\n–°–∫–æ—Ä–æ —Ç—É—Ç –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –≤–∫–ª—é—á–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.",
        reply_markup=back_button()
    )
    await callback.answer()
