# handlers/autotrade.py
from aiogram import Router, F
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton

from db.database import (
    has_active_subscription, autotrade_paid, autotrade_enabled,
    get_user_settings, update_user_settings, set_api_keys
)

router = Router()

# ---------- –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ----------
def back_btn():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="main_menu")]
    ])

def autotrade_menu_kb(user_id: int) -> InlineKeyboardMarkup:
    paid = autotrade_paid(user_id)
    enabled = autotrade_enabled(user_id)
    kb = []

    if paid:
        kb.append([InlineKeyboardButton(text=("‚è∏ –í—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—é" if enabled else "‚ñ∂Ô∏è –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—é"),
                                        callback_data=("auto_disable" if enabled else "auto_enable"))])
        kb.append([InlineKeyboardButton(text="üîë –ü–æ–¥–∫–ª—é—á–∏—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å API-–∫–ª—é—á–∏", callback_data="api_connect")])
        kb.append([
            InlineKeyboardButton(text="üí• –†–∏—Å–∫ %", callback_data="risk_edit"),
            InlineKeyboardButton(text="‚öñÔ∏è –ü–ª–µ—á–æ", callback_data="leverage_edit"),
        ])
        kb.append([
            InlineKeyboardButton(text="üì¶ –ú–∞—Ä–∂–∞", callback_data="margin_toggle"),
            InlineKeyboardButton(text="üîÄ –†–µ–∂–∏–º –ø–æ–∑–∏—Ü–∏–∏", callback_data="position_toggle"),
        ])
    else:
        kb.append([InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—é", callback_data="autotrade_pay_stub")])

    kb.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="main_menu")])
    return InlineKeyboardMarkup(inline_keyboard=kb)

# ---------- —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–≤–æ–¥–∞ ----------
class ApiForm(StatesGroup):
    key = State()
    secret = State()

class RiskForm(StatesGroup):
    value = State()

class LeverageForm(StatesGroup):
    value = State()

# ---------- —É—Ç–∏–ª–∏—Ç—ã ----------
def format_settings_text(user_id: int) -> str:
    s = get_user_settings(user_id)
    paid = autotrade_paid(user_id)
    enabled = autotrade_enabled(user_id)
    lines = [
        "ü§ñ <b>–ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è</b>",
        f"–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã: {'‚úÖ –æ–ø–ª–∞—á–µ–Ω–∞' if paid else '‚ùå –Ω–µ –æ–ø–ª–∞—á–µ–Ω–∞'}",
        f"–°–æ—Å—Ç–æ—è–Ω–∏–µ: {'‚ñ∂Ô∏è –≤–∫–ª—é—á–µ–Ω–∞' if enabled else '‚è∏ –≤—ã–∫–ª—é—á–µ–Ω–∞'}",
        "",
        f"–†–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É: <b>{s['risk_pct']:.2f}%</b>",
        f"–ü–ª–µ—á–æ: <b>x{s['leverage']}</b>",
        f"–ú–∞—Ä–∂–∞: <b>{s['margin_mode']}</b>",
        f"–†–µ–∂–∏–º –ø–æ–∑–∏—Ü–∏–∏: <b>{s['position_mode']}</b>",
        "",
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏ –∫–ª—é—á–∞–º–∏.",
    ]
    return "\n".join(lines)

# ---------- –≤—Ö–æ–¥ –≤ —Ä–∞–∑–¥–µ–ª –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª–∏ ----------
@router.callback_query(F.data == "trading_menu")
async def show_autotrade_menu(callback: CallbackQuery):
    user_id = callback.from_user.id
    if not has_active_subscription(user_id):
        await callback.message.edit_text(
            "–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª–µ–π, –Ω—É–∂–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–∏–≥–Ω–∞–ª—ã.\n"
            "–û—Ñ–æ—Ä–º–∏—Ç–µ –µ—ë –≤ ¬´üíπ –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª—ã¬ª.",
            reply_markup=back_btn()
        )
        await callback.answer()
        return

    await callback.message.edit_text(
        format_settings_text(user_id),
        reply_markup=autotrade_menu_kb(user_id),
        parse_mode="HTML"
    )
    await callback.answer()

# ---------- –æ–ø–ª–∞—Ç–∏—Ç—å –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—é (–∑–∞–≥–ª—É—à–∫–∞) ----------
@router.callback_query(F.data == "autotrade_pay_stub")
async def autotrade_pay_stub(callback: CallbackQuery):
    await callback.message.edit_text(
        "üí≥ –û–ø–ª–∞—Ç–∞ –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª–∏ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø—Ä—è–º–æ –≤ –±–æ—Ç–µ.\n\n"
        "–ü–æ–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∞ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /auto_pay30 (–∞–¥–º–∏–Ω).",
        reply_markup=back_btn()
    )
    await callback.answer()

# ---------- –≤–∫–ª/–≤—ã–∫–ª (–±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã) ----------
from db.database import toggle_autotrade
@router.callback_query(F.data == "auto_enable")
async def auto_enable(callback: CallbackQuery):
    user_id = callback.from_user.id
    toggle_autotrade(user_id, True)
    await callback.message.edit_text(
        format_settings_text(user_id),
        reply_markup=autotrade_menu_kb(user_id),
        parse_mode="HTML"
    )
    await callback.answer("–ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è –≤–∫–ª—é—á–µ–Ω–∞")

@router.callback_query(F.data == "auto_disable")
async def auto_disable(callback: CallbackQuery):
    user_id = callback.from_user.id
    toggle_autotrade(user_id, False)
    await callback.message.edit_text(
        format_settings_text(user_id),
        reply_markup=autotrade_menu_kb(user_id),
        parse_mode="HTML"
    )
    await callback.answer("–ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è –≤—ã–∫–ª—é—á–µ–Ω–∞")

# ---------- –≤–≤–æ–¥ API-–∫–ª—é—á–µ–π ----------
@router.callback_query(F.data == "api_connect")
async def api_connect_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(ApiForm.key)
    await callback.message.edit_text(
        "üîë –û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>API Key</b> –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π.",
        reply_markup=back_btn(),
        parse_mode="HTML"
    )
    await callback.answer()

@router.message(ApiForm.key)
async def api_key_entered(message: Message, state: FSMContext):
    await state.update_data(api_key=message.text.strip())
    await state.set_state(ApiForm.secret)
    await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <b>API Secret</b>.", parse_mode="HTML")

@router.message(ApiForm.secret)
async def api_secret_entered(message: Message, state: FSMContext):
    data = await state.get_data()
    key = data.get("api_key")
    secret = message.text.strip()
    set_api_keys(message.from_user.id, key, secret)
    await state.clear()
    await message.answer("‚úÖ –ö–ª—é—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ ¬´ü§ñ –ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è¬ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.", reply_markup=back_btn())

# ---------- –ø—Ä–∞–≤–∫–∞ —Ä–∏—Å–∫–∞ ----------
@router.callback_query(F.data == "risk_edit")
async def risk_edit(callback: CallbackQuery, state: FSMContext):
    await state.set_state(RiskForm.value)
    await callback.message.edit_text("–£–∫–∞–∂–∏—Ç–µ —Ä–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É –≤ % (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1.0)", reply_markup=back_btn())
    await callback.answer()

@router.message(RiskForm.value)
async def risk_save(message: Message, state: FSMContext):
    try:
        val = float(message.text.replace(",", "."))
        assert 0 < val <= 10
    except Exception:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0.1 –¥–æ 10. –ü—Ä–∏–º–µ—Ä: 1.0")
        return
    update_user_settings(message.from_user.id, risk_pct=val)
    await state.clear()
    await message.answer("‚úÖ –†–∏—Å–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –û—Ç–∫—Ä–æ–π—Ç–µ ¬´ü§ñ –ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è¬ª, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è.", reply_markup=back_btn())

# ---------- –ø—Ä–∞–≤–∫–∞ –ø–ª–µ—á–∞ ----------
@router.callback_query(F.data == "leverage_edit")
async def leverage_edit(callback: CallbackQuery, state: FSMContext):
    await state.set_state(LeverageForm.value)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –ø–ª–µ—á–æ (1‚Äì50). –ü—Ä–∏–º–µ—Ä: 5", reply_markup=back_btn())
    await callback.answer()

@router.message(LeverageForm.value)
async def leverage_save(message: Message, state: FSMContext):
    try:
        lev = int(message.text)
        assert 1 <= lev <= 50
    except Exception:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 50.")
        return
    update_user_settings(message.from_user.id, leverage=lev)
    await state.clear()
    await message.answer("‚úÖ –ü–ª–µ—á–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –û—Ç–∫—Ä–æ–π—Ç–µ ¬´ü§ñ –ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è¬ª, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è.", reply_markup=back_btn())

# ---------- –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏ —Ä–µ–∂–∏–º–æ–≤ ----------
@router.callback_query(F.data == "margin_toggle")
async def margin_toggle(callback: CallbackQuery):
    user_id = callback.from_user.id
    s = get_user_settings(user_id)
    new_mode = "CROSS" if s["margin_mode"] == "ISOLATED" else "ISOLATED"
    update_user_settings(user_id, margin_mode=new_mode)
    await callback.message.edit_text(
        format_settings_text(user_id), reply_markup=autotrade_menu_kb(user_id), parse_mode="HTML"
    )
    await callback.answer(f"–ú–∞—Ä–∂–∞: {new_mode}")

@router.callback_query(F.data == "position_toggle")
async def position_toggle(callback: CallbackQuery):
    user_id = callback.from_user.id
    s = get_user_settings(user_id)
    new_mode = "HEDGE" if s["position_mode"] == "ONEWAY" else "ONEWAY"
    update_user_settings(user_id, position_mode=new_mode)
    await callback.message.edit_text(
        format_settings_text(user_id), reply_markup=autotrade_menu_kb(user_id), parse_mode="HTML"
    )
    await callback.answer(f"–†–µ–∂–∏–º –ø–æ–∑–∏—Ü–∏–∏: {new_mode}")
