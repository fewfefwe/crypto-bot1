# statistics.py
import pandas as pd
import os
from datetime import datetime, timedelta

TRADES_FILE  = "trades_log.csv"    # –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–∑ trade_tracker
SIGNALS_FILE = "signals_log.csv"   # —É—Å—Ç–∞—Ä–µ–≤—à–∏–π (–µ—Å–ª–∏ –≤–¥—Ä—É–≥ –µ—Å—Ç—å)

def _load_trades_df() -> pd.DataFrame:
    """
    –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å trades_log.csv (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç).
    –ï—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç ‚Äî –ø—Ä–æ–±—É–µ–º signals_log.csv (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç) –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –æ–±—â–µ–º—É –≤–∏–¥—É.
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º DF —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏: closed_at (datetime), pnl_pct (float), status (str)
    –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ–π.
    """
    # 1) –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
    if os.path.exists(TRADES_FILE):
        df = pd.read_csv(TRADES_FILE)
        # –æ–∂–∏–¥–∞–µ–º—ã–µ –ø–æ–ª—è: signal_id,symbol,position,entry,tp,sl,risk_pct,leverage,rr_ratio,
        #                 opened_at,closed_at,status,closed_price,pnl_pct
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—ã
        for col in ("opened_at", "closed_at"):
            if col in df.columns:
                df[col] = pd.to_datetime(df[col], errors="coerce")
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è
        if "pnl_pct" not in df.columns:
            df["pnl_pct"] = 0.0
        if "status" not in df.columns:
            df["status"] = ""
        return df

    # 2) –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç (–µ—Å–ª–∏ –≤–¥—Ä—É–≥ –æ–Ω –ø–æ—è–≤–∏—Ç—Å—è)
    if os.path.exists(SIGNALS_FILE):
        df = pd.read_csv(SIGNALS_FILE)
        # –æ–∂–∏–¥–∞–µ–º—ã–µ –ø–æ–ª—è: datetime,symbol,position,entry,tp,sl,risk,leverage,status,profit_%,closed_at
        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Ñ–æ—Ä–º–∞—Ç—É –Ω–æ–≤–æ–≥–æ:
        if "profit_%" in df.columns and "pnl_pct" not in df.columns:
            df["pnl_pct"] = pd.to_numeric(df["profit_%"], errors="coerce")
        for col in ("datetime", "closed_at"):
            if col in df.columns:
                df[col] = pd.to_datetime(df[col], errors="coerce")
        # –ï—Å–ª–∏ –Ω–µ—Ç closed_at ‚Äî –ø—Ä–∏–º–µ–º datetime –∫–∞–∫ closed_at
        if "closed_at" not in df.columns and "datetime" in df.columns:
            df["closed_at"] = df["datetime"]
        if "status" not in df.columns:
            df["status"] = ""
        # –ü–µ—Ä–µ–∏–º–µ–Ω—É–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        if "datetime" in df.columns:
            df = df.rename(columns={"datetime": "opened_at"})
        # –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Å—Ç–æ–ª–±—Ü—ã
        if "pnl_pct" not in df.columns:
            df["pnl_pct"] = 0.0
        return df

    # 3) –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ ‚Äî –ø—É—Å—Ç–æ–π –∫–∞—Ä–∫–∞—Å
    return pd.DataFrame(columns=[
        "signal_id","symbol","position","entry","tp","sl","risk_pct","leverage","rr_ratio",
        "opened_at","closed_at","status","closed_price","pnl_pct"
    ])

def calculate_statistics(period: str = "day") -> dict:
    """
    –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–∫—Ä—ã—Ç—ã–º —Å–¥–µ–ª–∫–∞–º –∑–∞ –ø–µ—Ä–∏–æ–¥: day / week / month
    """
    df = _load_trades_df()
    if df.empty:
        return {"signals": 0, "positive": 0, "negative": 0, "profit_percent": 0.0}

    # –ë–µ—Ä—ë–º –¢–û–õ–¨–ö–û –∑–∞–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏ (–µ—Å—Ç—å closed_at)
    if "closed_at" in df.columns:
        df = df[df["closed_at"].notna()].copy()
    if df.empty:
        return {"signals": 0, "positive": 0, "negative": 0, "profit_percent": 0.0}

    now = datetime.now()
    if period == "day":
        start_date = now - timedelta(days=1)
    elif period == "week":
        start_date = now - timedelta(weeks=1)
    elif period == "month":
        start_date = now - timedelta(days=30)
    else:
        # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π ‚Äî –¥–µ—Ñ–æ–ª—Ç: 7 –¥–Ω–µ–π
        start_date = now - timedelta(days=7)

    # –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ –∑–∞–∫—Ä—ã—Ç–∏—è
    df_period = df[df["closed_at"] >= start_date]
    if df_period.empty:
        return {"signals": 0, "positive": 0, "negative": 0, "profit_percent": 0.0}

    # –°—á—ë—Ç—á–∏–∫–∏
    signals = len(df_period)
    # –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ/–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ pnl_pct
    if "pnl_pct" in df_period.columns:
        positive = int((df_period["pnl_pct"] > 0).sum())
        negative = int((df_period["pnl_pct"] < 0).sum())
        profit_percent = float(df_period["pnl_pct"].sum())
    else:
        positive = negative = 0
        profit_percent = 0.0

    return {
        "signals": signals,
        "positive": positive,
        "negative": negative,
        "profit_percent": round(profit_percent, 2),
    }

def format_statistics(period: str = "day") -> str:
    stats = calculate_statistics(period)
    period_name = {"day": "–¥–µ–Ω—å", "week": "–Ω–µ–¥–µ–ª—é", "month": "–º–µ—Å—è—Ü"}.get(period, period)
    return (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {period_name}\n"
        f"‚ñ´Ô∏è –ü—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å: {stats['profit_percent']}%\n"
        f"‚ñ´Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫: {stats['signals']}\n"
        f"‚ñ´Ô∏è –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö: {stats['positive']}\n"
        f"‚ñ´Ô∏è –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö: {stats['negative']}"
    )
