import os
import io
import shutil
import joblib
import pandas as pd
import numpy as np
from pathlib import Path
from datetime import datetime
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neural_network import MLPClassifier
from aiogram import Bot
from config import ADMIN_CHAT_ID

SIGNALS_FILE = Path("signals_log.csv")
TRADES_FILE  = Path("trades_log.csv")
MODEL_DIR    = Path("model")
SCALER_PATH  = MODEL_DIR / "scaler.pkl"
MODEL_PATH   = MODEL_DIR / "signal_model.pkl"

MIN_SAMPLES = 80  # –º–∏–Ω–∏–º—É–º –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏

def _ts():
    return datetime.now().strftime("%Y-%m-%d %H:%M:%S")

def _backup_if_exists(path: Path):
    if path.exists():
        ts = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup = path.with_suffix(path.suffix + f".bak_{ts}")
        shutil.copy2(path, backup)
        return backup
    return None

def _build_features(df_sig: pd.DataFrame) -> pd.DataFrame:
    """
    –î–µ–ª–∞–µ—Ç —á–∏—Å–ª–æ–≤—ã–µ —Ñ–∏—á–∏ –∏–∑ –ª–æ–≥–∞ —Å–∏–≥–Ω–∞–ª–æ–≤.
    –î–æ–ø—É—Å–∫–∞–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ ‚Äî –∑–∞–ø–æ–ª–Ω—è–µ–º NaN/0.
    """
    out = pd.DataFrame(index=df_sig.index)

    # –ë–∏–Ω–∞—Ä–Ω—ã–π –ø—Ä–∏–∑–Ω–∞–∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    pos = df_sig.get("position", pd.Series(index=df_sig.index, dtype=object)).astype(str).str.upper()
    out["is_long"]  = (pos == "LONG").astype(int)
    out["is_short"] = (pos == "SHORT").astype(int)

    # –ë–∞–∑–æ–≤—ã–µ —á–∏—Å–ª–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    for col in ["entry", "sl", "tp", "score", "confidence", "rr_ratio"]:
        out[col] = pd.to_numeric(df_sig.get(col, 0), errors="coerce").fillna(0.0)

    # –ò–Ω–∂–µ–Ω–µ—Ä–∏—è –æ—Ç–Ω–æ—à–µ–Ω–∏–π
    out["risk_abs"] = (out["entry"] - out["sl"]).abs()
    out["tp_dist"]  = (out["tp"] - out["entry"]).abs()

    # –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
    denom = out["risk_abs"].replace(0, np.nan)
    out["rr_calc"] = (out["tp_dist"] / denom).fillna(0.0)

    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º confidence (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω 0..100)
    if out["confidence"].max() > 1.0:
        out["confidence"] = out["confidence"] / 100.0

    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë: —á–∞—Å –¥–Ω—è, –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏, –∏ —Ç.–ø., –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –≤ –ª–æ–≥–µ
    return out

async def auto_retrain(bot: Bot):
    # 0) –ü—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–æ–≤
    if not SIGNALS_FILE.exists():
        msg = "‚ö†Ô∏è –î–ª—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è –Ω–µ—Ç —Ñ–∞–π–ª–∞ signals_log.csv."
        print(msg); await bot.send_message(ADMIN_CHAT_ID, msg); return
    if not TRADES_FILE.exists():
        msg = "‚ö†Ô∏è –î–ª—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è –Ω–µ—Ç —Ñ–∞–π–ª–∞ trades_log.csv."
        print(msg); await bot.send_message(ADMIN_CHAT_ID, msg); return

    # 1) –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤
    try:
        df_sig = pd.read_csv(SIGNALS_FILE)
        df_trd = pd.read_csv(TRADES_FILE)
    except Exception as e:
        msg = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}"
        print(msg); await bot.send_message(ADMIN_CHAT_ID, msg); return

    # 2) –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π
    need_sig = {"signal_id", "position", "entry", "sl", "tp"}
    need_trd = {"signal_id", "pnl_pct"}
    if not need_sig.issubset(df_sig.columns):
        msg = f"‚ö†Ô∏è –í signals_log.csv –Ω–µ—Ç –Ω—É–∂–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫: {need_sig - set(df_sig.columns)}"
        print(msg); await bot.send_message(ADMIN_CHAT_ID, msg); return
    if not need_trd.issubset(df_trd.columns):
        msg = f"‚ö†Ô∏è –í trades_log.csv –Ω–µ—Ç –Ω—É–∂–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫: {need_trd - set(df_trd.columns)}"
        print(msg); await bot.send_message(ADMIN_CHAT_ID, msg); return

    # 3) –°–∫–ª–µ–π–∫–∞ –ø–æ signal_id (inner join ‚Äî –±–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ —Ç–µ, —É –∫–æ–≥–æ –µ—Å—Ç—å –∏—Å—Ö–æ–¥)
    df = pd.merge(df_sig, df_trd, on="signal_id", how="inner", suffixes=("_sig", "_trd"))
    if len(df) < MIN_SAMPLES:
        msg = f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è: {len(df)} < {MIN_SAMPLES}"
        print(msg); await bot.send_message(ADMIN_CHAT_ID, msg); return

    # 4) –ú–µ—Ç–∫–∞ –∫–ª–∞—Å—Å–∞ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–¥–µ–ª–∫–∏
    y = (pd.to_numeric(df["pnl_pct"], errors="coerce").fillna(0.0) > 0.0).astype(int)

    # 5) –§–∏—á–∏
    X = _build_features(df)

    # 6) –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–µ/—Ç–µ—Å—Ç–æ–≤–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ
    X_train, X_test, y_train, y_test = train_test_split(
        X.values, y.values, test_size=0.2, random_state=42, stratify=y.values
    )

    # 7) –°–∫–µ–π–ª–µ—Ä –∏ –º–æ–¥–µ–ª—å
    scaler = StandardScaler()
    X_train_scaled = scaler.fit_transform(X_train)
    X_test_scaled  = scaler.transform(X_test)

    model = MLPClassifier(
        hidden_layer_sizes=(64, 32),
        activation="relu",
        max_iter=600,
        random_state=42
    )
    model.fit(X_train_scaled, y_train)

    acc = float(model.score(X_test_scaled, y_test))
    await bot.send_message(ADMIN_CHAT_ID, f"‚úÖ –ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –¢–æ—á–Ω–æ—Å—Ç—å –Ω–∞ —Ç–µ—Å—Ç–µ: {acc:.2%}")

    # 8) –ë—ç–∫–∞–ø —Å—Ç–∞—Ä—ã—Ö –º–æ–¥–µ–ª–µ–π –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö
    MODEL_DIR.mkdir(parents=True, exist_ok=True)
    b1 = _backup_if_exists(MODEL_PATH)
    b2 = _backup_if_exists(SCALER_PATH)

    joblib.dump(model, MODEL_PATH)
    joblib.dump(scaler, SCALER_PATH)

    msg = "üì¶ –ú–æ–¥–µ–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: signal_model.pkl –∏ scaler.pkl"
    if b1 or b2:
        msg += f"\nüóÇ –ë—ç–∫–∞–ø—ã: {b1.name if b1 else ''} {b2.name if b2 else ''}".strip()
    await bot.send_message(ADMIN_CHAT_ID, msg)

    # 9) (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ì–æ—Ä—è—á–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏, –µ—Å–ª–∏ –¥–æ–±–∞–≤–∏—à—å reload_model() –≤ core/signal_generator.py
    try:
        from core.signal_generator import reload_model  # –¥–æ–±–∞–≤—å —Ñ—É–Ω–∫—Ü–∏—é (–Ω–∏–∂–µ)
        reload_model()
        await bot.send_message(ADMIN_CHAT_ID, "‚ôªÔ∏è –ú–æ–¥–µ–ª—å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞ –≤ —Ä–∞–Ω—Ç–∞–π–º–µ –±–µ–∑ —Ä–µ—Å—Ç–∞—Ä—Ç–∞.")
    except Exception:
        # –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ –º–æ–ª—á–∏–º; –º–æ–¥–µ–ª—å –ø–æ–¥—Ö–≤–∞—Ç–∏—Ç—Å—è –ø–æ—Å–ª–µ —Ä–µ—Å—Ç–∞—Ä—Ç–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞
        pass
